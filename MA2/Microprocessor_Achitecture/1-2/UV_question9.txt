//Question 9:
// Write a program which multiplies the (unsigned)
// content of reg1 and reg2 and
// writes the result into reg4(MSB), reg3.

//R1 = loop value
//R2 = Multiplier B
//R3 = LSB result
//R4 = MSB result
//R5 = mask
//R6 = LSB of left shit
//R7 = MSB of the left shit

                
                movi    1,0xffff        //Multiplicant A
                movi    2,0xffff        //Multiplier B
                add     6,0,1
                addi    5,0,1           // R5: mask to know if the xth bit is 1 or 0 
                addi    1,0,16          // value for the loop


loop:           beq     1,0,end
                addi    1,1,-1

                sw      1,0,0

                nand    1,5,2
                nand    1,1,1

                beq     1,0,lshift
                beq     0,0,resultcarry

lshift:         add     7,7,7

                sw      5,0,1
                lui     5,512

                nand    1,5,6   
                nand    1,1,1

                lw      5,0,1

                add     6,6,6
                beq     1,0,setup

                addi    7,7,1
                beq     0,0,setup

resultcarry:    sw      5,0,1           //Save mask value in mem[1]
                sw      2,0,2           //Save multiplier B value in mem[2]

                lui    5,512    

                // Extract the MSB of R1
                nand    1,5,3  
                // Extract the MSB of R2
                nand    2,5,6

                add     3,3,6
                add     4,4,7

                beq     1,2,equalmsb    // Check if MSBs of terms are equal

                // Extract the MSB of Sum
                nand    1,5,3             
                nand    1,1,1 
                beq     1,0,carry       // If MSB of result is 0, a carry happened            
                beq     0,0,carrysetup 


equalmsb:       nand    1,1,1          
                beq     1,5,carry       // If MSBs terms are 1, a carry happened
                beq     0,0,carrysetup

carry:          addi    4,4,1 
                beq     0,0,carrysetup         

//Setup before returning to loop
setup:          lw      1,0,0           //Load the counter
                add     5,5,5           //Go the next mask: 1, 2, 4, 8, 16, ...
                beq     0,0,loop

//Set the right values for R5 and R2 before left shifting
carrysetup:     lw      5,0,1           //Load Mask value
                lw      2,0,2                   //Load 
                beq     0,0,lshift


end:    halt

// MSB extraction example:
// If R1 = 1010 0001 0000 1111 and R4 = 1000 0000 0000 0000 (the mask): 
// Step 1: nand  1,4,1 ---> 1010 0001 0000 1111 NAND 1000 0000 0000 0000 = 0111 1111 1111 1111 
// Step 2: nand  1,1,1 ---> 0111 1111 1111 1111 NAND 0111 1111 1111 1111 = 1000 0000 0000 0000 
// This means the MSB of R1 is 1.