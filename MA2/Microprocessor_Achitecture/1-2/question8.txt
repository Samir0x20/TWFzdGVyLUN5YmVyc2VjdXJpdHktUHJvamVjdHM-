// Question 8:
// Write a program which adds the unsigned content of 32-bit numbers
// stored in reg4(MSB), reg3 and reg6(MSB), reg5 and 
// writes the result in reg4(MSB), reg3.


//The code passed all tests on http://212.227.160.152:8000/  
//We spent 1h with Mr Ladner Navid to figure out why the test with 0x00007ffff + 0x00007ffff didn't passed.
//It gives the right answer on the simulator.


        // Initialize R4(MSB) and R3 with unsigned 32-bit number
        movi    4,0x0000            
        movi    3,0x7fff

        // Initialize R6(MSB) and R5 with unsigned 32-bit number
        movi    6,0x0000
        movi    5,0x7fff

        add     4,4,6           // Sum the MSB term
        lui     7,512           // R7: mask to extract MSB

        // Extract the MSB of R3 (See example for more details)
        nand    1,3,7
        nand    1,1,1

        // Extract the MSB of R5
        nand    2,5,7
        nand    2,2,2

        add     3,5,3           // Sum the LSB term
        beq     1,2,equalmsb    // Check if MSBs of terms are equal

        // Extract the MSB from the lower 16 bits of the sum
        nand    1,7,3
        nand    1,1,1

        beq     1,0,carry       // If MSB of the lower 16 bits of the sum is 0, a carry happened
        halt

equalmsb: lui     7,512
        beq     1,7,carry       // If MSBs of the upper 16 bits of the number are 1, a carry happened
        halt

carry: addi    4,4,1
        halt

// MSB extraction example:
// If R1 = 1010 0001 0000 1111 and R4 = 1000 0000 0000 0000 (the mask): 
// Step 1: nand  1,4,1 ---> 1010 0001 0000 1111 NAND 1000 0000 0000 0000 = 0111 1111 1111 1111 
// Step 2: nand  1,1,1 ---> 0111 1111 1111 1111 NAND 0111 1111 1111 1111 = 1000 0000 0000 0000 
// This means the MSB of R1 is 1.

