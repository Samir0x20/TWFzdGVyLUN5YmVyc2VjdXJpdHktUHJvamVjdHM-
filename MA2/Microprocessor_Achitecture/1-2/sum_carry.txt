// Question 7: 
// Write a program that adds the unsigned content of reg1 and reg2, 
// stores the result in reg3, and stores the carry bit in reg4.

        //Initialize registers with unsigned 16-bit numbers
        movi    1,0xffff          
        movi    2,0xffff          
        movi    4,0x8000          // R4: mask to extract MSB for R1, R2, and R3
        add     3,1,2   
          
        // Extract the MSB of R1
        nand    1,4,1             
        nand    1,1,1             
        // Extract the MSB of R2
        nand    2,4,2             
        nand    2,2,2             

        beq     1,2,equalmsb     // Check if MSBs of terms are equal

        // Extract the MSB of Sum
        
        nand    1,4,3             
        nand    1,1,1             

        beq     1,0,carry         // If MSB of result is 0, a carry happened
        addi    4,0,0             
        halt

equalmsb:
        beq     1,4,carry         // If MSBs terms are 1, a carry happened
        addi    4,0,0             
        halt

carry:
        addi    4,0,1             
        halt

// MSB extraction example:
// If R1 = 1010 0001 0000 1111 and R4 = 1000 0000 0000 0000 (the mask): 
// Step 1: nand  1,4,1 ---> 1010 0001 0000 1111 NAND 1000 0000 0000 0000 = 0111 1111 1111 1111 
// Step 2: nand  1,1,1 ---> 0111 1111 1111 1111 NAND 0111 1111 1111 1111 = 1000 0000 0000 0000 
// This means the MSB of R1 is 1.